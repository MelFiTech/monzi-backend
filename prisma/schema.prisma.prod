generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                 @id @default(cuid())
  email                           String                 @unique
  phone                           String                 @unique
  firstName                       String?
  lastName                        String?
  gender                          Gender
  dateOfBirth                     DateTime
  createdAt                       DateTime               @default(now())
  updatedAt                       DateTime               @updatedAt
  passcode                        String
  bvn                             String?                @unique
  isVerified                      Boolean                @default(false)
  isOnboarded                     Boolean                @default(false)
  kycStatus                       KycStatus              @default(PENDING)
  kycVerifiedAt                   DateTime?
  selfieUrl                       String?
  bvnVerifiedAt                   DateTime?
  bvnProviderResponse             Json?
  otpCode                         String?
  otpExpiresAt                    DateTime?
  isActive                        Boolean                @default(true)
  notificationsEnabled            Boolean                @default(true)
  promotionalNotificationsEnabled Boolean                @default(true)
  transactionNotificationsEnabled Boolean                @default(true)
  role                            UserRole               @default(USER)
  metadata                        Json?
  admin_action_logs               admin_action_logs[]
  aiApprovals                     AiApproval[]
  aiQueries                       AiQuery[]
  notification_history            notification_history[]
  ocrScans                        OcrScan[]
  push_tokens                     push_tokens[]
  transactions                    Transaction[]
  wallet                          Wallet?

  @@map("users")
}

model Wallet {
  id                   String              @id @default(cuid())
  userId               String              @unique
  balance              Float               @default(0.00)
  currency             String              @default("NGN")
  virtualAccountNumber String?             @unique
  providerId           String?
  providerAccountName  String?
  provider             String?
  bankName             String?
  pin                  String?
  isActive             Boolean             @default(true)
  dailyLimit           Float               @default(100000)
  monthlyLimit         Float               @default(1000000)
  lastTransactionAt    DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  receivedTransactions WalletTransaction[] @relation("ReceiverWallet")
  sentTransactions     WalletTransaction[] @relation("SenderWallet")
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model WalletTransaction {
  id                    String                @id @default(cuid())
  amount                Float
  type                  WalletTransactionType
  status                TransactionStatus     @default(PENDING)
  reference             String                @unique
  description           String?
  fee                   Float                 @default(0)
  senderWalletId        String?
  receiverWalletId      String?
  bankAccountId         String?
  providerReference     String?
  providerResponse      Json?
  senderBalanceBefore   Float?
  senderBalanceAfter    Float?
  receiverBalanceBefore Float?
  receiverBalanceAfter  Float?
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  bankAccount           Account?              @relation(fields: [bankAccountId], references: [id])
  receiverWallet        Wallet?               @relation("ReceiverWallet", fields: [receiverWalletId], references: [id])
  senderWallet          Wallet?               @relation("SenderWallet", fields: [senderWalletId], references: [id])

  @@map("wallet_transactions")
}

model Account {
  id                 String              @id @default(cuid())
  accountName        String
  accountNumber      String
  bankName           String
  bankCode           String?
  routingNumber      String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  fromTransactions   Transaction[]       @relation("FromAccount")
  toTransactions     Transaction[]       @relation("ToAccount")
  walletTransactions WalletTransaction[]

  @@unique([accountNumber, bankCode])
  @@map("accounts")
}

model Transaction {
  id            String            @id @default(cuid())
  amount        Float
  currency      String            @default("NGN")
  description   String?
  reference     String            @unique
  status        TransactionStatus @default(PENDING)
  type          TransactionType
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userId        String
  fromAccountId String?
  toAccountId   String?
  ocrScanId     String?
  metadata      Json?
  fromAccount   Account?          @relation("FromAccount", fields: [fromAccountId], references: [id])
  ocrScan       OcrScan?          @relation(fields: [ocrScanId], references: [id])
  toAccount     Account?          @relation("ToAccount", fields: [toAccountId], references: [id])
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model OcrScan {
  id            String        @id @default(cuid())
  originalText  String
  cleanedText   String?
  extractedData Json?
  imageUrl      String?
  confidence    Float?
  status        OcrStatus     @default(PROCESSING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@map("ocr_scans")
}

model AiQuery {
  id         String        @id @default(cuid())
  prompt     String
  response   String?
  model      String        @default("gemini-2.0-flash")
  status     AiQueryStatus @default(PROCESSING)
  structured Json?
  tokens     Int?
  confidence Float?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_queries")
}

model FeeConfiguration {
  id          String   @id @default(cuid())
  feeType     FeeType  @unique
  percentage  Float?
  fixedAmount Float?
  minAmount   Float?
  maxAmount   Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?

  @@map("fee_configurations")
}

model SystemConfiguration {
  id          String          @id @default(cuid())
  key         SystemConfigKey @unique
  value       String
  description String?
  updatedAt   DateTime        @updatedAt

  @@map("system_configurations")
}

model AiApproval {
  id         String           @id @default(cuid())
  type       AiApprovalType
  entityId   String
  status     AiApprovalStatus @default(PENDING)
  confidence Float?
  reasoning  String?
  reviewedBy String?
  reviewedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  userId     String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_approvals")
}

model admin_action_logs {
  id          String   @id
  adminId     String
  adminEmail  String
  action      String
  targetType  String?
  targetId    String?
  targetEmail String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  users       User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([adminId])
  @@index([createdAt])
}

model auditor_chats {
  id                     String                 @id
  title                  String?
  configId               String
  adminUserId            String
  sessionId              String                 @unique
  isActive               Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  auditor_configurations auditor_configurations @relation(fields: [configId], references: [id], onDelete: Cascade)
  auditor_messages       auditor_messages[]
  auditor_reports        auditor_reports[]

  @@index([adminUserId])
  @@index([sessionId])
}

model auditor_configurations {
  id            String          @id
  name          String
  description   String?
  model         String          @default("claude-3-5-sonnet-20241022")
  temperature   Float           @default(0.7)
  maxTokens     Int             @default(8000)
  systemPrompt  String?
  isActive      Boolean         @default(true)
  encryptionKey String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  auditor_chats auditor_chats[]
}

model auditor_messages {
  id            String             @id
  chatId        String
  role          AuditorMessageRole
  content       String
  metadata      Json?
  tokens        Int?
  createdAt     DateTime           @default(now())
  auditor_chats auditor_chats      @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model auditor_metrics {
  id                 String   @id
  period             String
  periodType         String
  totalUsers         Int      @default(0)
  totalTransactions  Int      @default(0)
  totalVolume        Float    @default(0)
  averageTransaction Float    @default(0)
  successRate        Float    @default(0)
  failureRate        Float    @default(0)
  fraudAlerts        Int      @default(0)
  systemHealth       Float    @default(100)
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime

  @@unique([period, periodType])
  @@index([periodType])
}

model auditor_reports {
  id              String            @id
  chatId          String
  type            AuditorReportType
  title           String
  content         String
  summary         String?
  riskLevel       AuditorRiskLevel  @default(LOW)
  findings        Json?
  recommendations Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  auditor_chats   auditor_chats     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([riskLevel])
  @@index([type])
}

model notification_history {
  id            String              @id
  userId        String
  type          NotificationType
  channel       NotificationChannel
  title         String
  body          String
  data          Json?
  status        NotificationStatus  @default(PENDING)
  deliveredAt   DateTime?
  readAt        DateTime?
  failureReason String?
  pushToken     String?
  reference     String?
  metadata      Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime
  users         User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([status])
  @@index([type])
  @@index([userId])
}

model push_tokens {
  id                   String   @id
  token                String   @unique
  deviceId             String?
  platform             String?
  isActive             Boolean  @default(true)
  lastUsedAt           DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  userId               String
  appOwnership         String?
  appVersion           String?
  brand                String?
  buildVersion         String?
  deviceName           String?
  executionEnvironment String?
  isDevice             Boolean?
  manufacturer         String?
  osVersion            String?
  users                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model webhook_logs {
  id            String    @id
  provider      String
  eventType     String
  reference     String
  accountNumber String?
  amount        Float?
  currency      String?
  status        String?
  payload       Json
  processedAt   DateTime?
  processed     Boolean   @default(true)
  walletUpdated Boolean   @default(false)
  transactionId String?
  error         String?
  createdAt     DateTime  @default(now())
  contentHash   String?
  receivedAt    DateTime  @default(now())

  @@unique([reference, provider])
  @@index([contentHash])
}

enum SystemConfigKey {
  DEFAULT_WALLET_PROVIDER
  DEFAULT_TRANSFER_PROVIDER
  MAINTENANCE_MODE
  KYC_REQUIRED
  AI_AUTO_APPROVE_THRESHOLD
}

enum KycStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum AiApprovalType {
  TRANSACTION
  KYC_VERIFICATION
  RISK_ASSESSMENT
}

enum AiApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  MANUAL_REVIEW_REQUIRED
}

enum WalletTransactionType {
  FUNDING
  TRANSFER
  WITHDRAWAL
  REVERSAL
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum TransactionType {
  TRANSFER
  PAYMENT
  WITHDRAWAL
  DEPOSIT
}

enum OcrStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum FeeType {
  TRANSFER
  WITHDRAWAL
  FUNDING
  INTERNATIONAL_TRANSFER
  FUNDING_BUDPAY
  FUNDING_SMEPLUG
  FUNDING_POLARIS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AiQueryStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum AuditorMessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum AuditorReportType {
  FINANCIAL_ANALYSIS
  RISK_ASSESSMENT
  COMPLIANCE_AUDIT
  SYSTEM_HEALTH
  FRAUD_DETECTION
}

enum AuditorRiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationChannel {
  PUSH
  WEBSOCKET
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  EXPIRED
}

enum NotificationType {
  TRANSACTION
  WALLET_FUNDING
  WALLET_DEBIT
  TRANSFER
  WITHDRAWAL
  PROMOTIONAL
  SYSTEM
  SECURITY
  KYC
  GENERAL
}

enum UserRole {
  USER
  ADMIN
  CUSTOMER_REP
  DEVELOPER
  SUDO_ADMIN
}
