// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique // Now required for Nigerian phone number
  firstName String?
  lastName  String?
  gender    Gender   // Required: MALE, FEMALE, OTHER
  dateOfBirth DateTime // Required: User's date of birth
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth fields
  passcode     String  // Hashed 6-digit numeric passcode (required)
  bvn          String? // Bank Verification Number (optional, used in KYC)
  isVerified   Boolean @default(false)
  isOnboarded  Boolean @default(false)

  // KYC fields
  kycStatus      KycStatus @default(PENDING)
  kycVerifiedAt  DateTime?
  selfieUrl      String?   // Uploaded selfie for verification
  bvnVerifiedAt  DateTime? // When BVN was verified
  bvnProviderResponse Json? // Raw response from BVN verification provider (Raven, etc.)
  
  // OTP verification
  otpCode      String?
  otpExpiresAt DateTime?

  // Relations
  transactions Transaction[]
  ocrScans     OcrScan[]
  wallet       Wallet?
  aiApprovals  AiApproval[]
  aiQueries    AiQuery[]

  @@map("users")
}

model Wallet {
  id            String   @id @default(cuid())
  userId        String   @unique
  balance       Float    @default(0.00)
  currency      String   @default("NGN")
  
  // Virtual account details from provider
  virtualAccountNumber String? @unique  // Generated by provider (e.g., 9038123456)
  providerId          String?           // Provider's internal account ID
  providerAccountName String?           // Account name at provider
  provider            String?           // Provider that created this wallet (BUDPAY, POLARIS, SMEPLUG)
  bankName            String?           // Bank name from the provider
  
  // Wallet security
  pin           String?  // Hashed wallet PIN
  isActive      Boolean  @default(true)
  
  // Limits and controls
  dailyLimit    Float    @default(100000)  // Daily spending limit (₦100,000)
  monthlyLimit  Float    @default(1000000) // Monthly limit (₦1,000,000)
  
  // Metadata
  lastTransactionAt DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentTransactions    WalletTransaction[] @relation("SenderWallet")
  receivedTransactions WalletTransaction[] @relation("ReceiverWallet")

  @@map("wallets")
}

model WalletTransaction {
  id          String                 @id @default(cuid())
  amount      Float
  type        WalletTransactionType
  status      TransactionStatus      @default(PENDING)
  reference   String                 @unique
  description String?
  fee         Float                  @default(0)
  
  // Sender details (for transfers and withdrawals)
  senderWalletId   String?
  senderWallet     Wallet?  @relation("SenderWallet", fields: [senderWalletId], references: [id])
  
  // Receiver details (for transfers and funding)
  receiverWalletId String?
  receiverWallet   Wallet?  @relation("ReceiverWallet", fields: [receiverWalletId], references: [id])
  
  // External bank account details (for funding/withdrawal)
  bankAccountId    String?
  bankAccount      Account? @relation(fields: [bankAccountId], references: [id])
  
  // Provider details
  providerReference String?  // Provider's transaction reference
  providerResponse  Json?    // Full provider response
  
  // Balances (for audit)
  senderBalanceBefore   Float?
  senderBalanceAfter    Float?
  receiverBalanceBefore Float?
  receiverBalanceAfter  Float?
  
  // Additional metadata
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("wallet_transactions")
}

model Account {
  id          String   @id @default(cuid())
  accountName String
  accountNumber String
  bankName    String
  bankCode    String?
  routingNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Transactions from/to this account
  fromTransactions Transaction[] @relation("FromAccount")
  toTransactions   Transaction[] @relation("ToAccount")
  
  // Wallet transactions involving this bank account
  walletTransactions WalletTransaction[]

  @@unique([accountNumber, bankCode])
  @@map("accounts")
}

model Transaction {
  id            String            @id @default(cuid())
  amount        Float
  currency      String            @default("NGN")
  description   String?
  reference     String            @unique
  status        TransactionStatus @default(PENDING)
  type          TransactionType
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // User who initiated the transaction
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // From and To accounts
  fromAccountId String?
  fromAccount   Account? @relation("FromAccount", fields: [fromAccountId], references: [id])
  
  toAccountId String?
  toAccount   Account? @relation("ToAccount", fields: [toAccountId], references: [id])

  // Related OCR scan if transaction was initiated from image
  ocrScanId String?
  ocrScan   OcrScan? @relation(fields: [ocrScanId], references: [id])

  // Additional metadata
  metadata Json?

  @@map("transactions")
}

model OcrScan {
  id           String    @id @default(cuid())
  originalText String    // Raw OCR output
  cleanedText  String?   // Processed/cleaned text
  extractedData Json?    // Structured data extracted from text
  imageUrl     String?   // URL to the uploaded image
  confidence   Float?    // OCR confidence score
  status       OcrStatus @default(PROCESSING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // User who uploaded the image
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Related transactions created from this scan
  transactions Transaction[]

  @@map("ocr_scans")
}

model AiQuery {
  id         String        @id @default(cuid())
  prompt     String        // User's question/query
  response   String?       // AI's response
  model      String        @default("gemini-2.0-flash") // AI model used
  status     AiQueryStatus @default(PROCESSING) // Query processing status
  structured Json?         // Structured query data from AI parsing
  tokens     Int?          // Number of tokens used
  confidence Float?        // AI confidence score
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // User who made the query
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_queries")
}

model FeeConfiguration {
  id          String   @id @default(cuid())
  feeType     FeeType  // TRANSFER, WITHDRAWAL, etc.
  percentage  Float?   // Percentage fee (e.g., 0.01 for 1%)
  fixedAmount Float?   // Fixed fee amount
  minAmount   Float?   // Minimum fee amount
  maxAmount   Float?   // Maximum fee amount
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([feeType])
  @@map("fee_configurations")
}

model SystemConfiguration {
  id     String          @id @default(cuid())
  key    SystemConfigKey @unique
  value  String
  description String?
  updatedAt DateTime @updatedAt

  @@map("system_configurations")
}

model AiApproval {
  id          String            @id @default(cuid())
  type        AiApprovalType    // TRANSACTION, KYC_VERIFICATION, etc.
  entityId    String            // ID of the entity being approved (e.g., transaction ID)
  status      AiApprovalStatus  @default(PENDING)
  confidence  Float?            // AI confidence score (0-1)
  reasoning   String?           // AI's reasoning for the decision
  reviewedBy  String?           // Human reviewer ID if manually reviewed
  reviewedAt  DateTime?         // When manually reviewed
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // User associated with this approval
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_approvals")
}

enum SystemConfigKey {
  DEFAULT_WALLET_PROVIDER
  DEFAULT_TRANSFER_PROVIDER
  MAINTENANCE_MODE
  KYC_REQUIRED
  AI_AUTO_APPROVE_THRESHOLD
}

enum KycStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum AiApprovalType {
  TRANSACTION
  KYC_VERIFICATION
  RISK_ASSESSMENT
}

enum AiApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  MANUAL_REVIEW_REQUIRED
}

enum WalletTransactionType {
  FUNDING      // Money coming into wallet (from bank/card)
  TRANSFER     // Money going to another wallet
  WITHDRAWAL   // Money going to external bank account
  REVERSAL     // Transaction reversal
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum TransactionType {
  TRANSFER
  PAYMENT
  WITHDRAWAL
  DEPOSIT
}

enum OcrStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum FeeType {
  TRANSFER
  WITHDRAWAL
  FUNDING
  INTERNATIONAL_TRANSFER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AiQueryStatus {
  PROCESSING
  COMPLETED
  FAILED
}
